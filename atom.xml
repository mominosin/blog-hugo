<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Momiage blog]]></title>
  <link href="http://blog.momiage.tokyo/atom.xml" rel="self"/>
  <link href="http://blog.momiage.tokyo/"/>
  <updated>2014-09-04T02:34:50+09:00</updated>
  <id>http://blog.momiage.tokyo/</id>
  <author>
    <name><![CDATA[mominosin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[S3間でファイルを比較し更新又は新規のファイルがあればコピーする]]></title>
    <link href="http://blog.momiage.tokyo/blog/2014/09/04/awss32s3/"/>
    <updated>2014-09-04T01:32:56+09:00</updated>
    <id>http://blog.momiage.tokyo/blog/2014/09/04/awss32s3</id>
    <content type="html"><![CDATA[<h1>RubyのAWS SDKを利用してAWS CLIのS3 Syncっぽいことする</h1>

<p>AWS SDKを利用してS3のバケット間コピーをやってみる。
ただバッケット間コピーだけしてもつまらないので、コピー元バケットで更新のあったファイル、又は新規追加されたファイルだけをコピーするようにする。</p>

<p><a href="https://github.com/aws/aws-cli" title="AWS CLI">AWS CLI</a>のS3 sync <code>aws s3 sync s3://hoge s3://fuga</code> っぽいことをやってみる。</p>

<p>あ、今回はAWS SDKのRuby版を利用するのだけど、
<a href="https://github.com/aws/aws-sdk-ruby" title="aws-sdk">現行のSDK</a>ではなく<a href="https://github.com/aws/aws-sdk-core-ruby" title="aws-sdk-core">開発中のSDK</a>を利用していますー。</p>

<!--more-->


<p>以下コード解説はコメントにて、もっとスマートなやり方等ご存知の方はご指摘等々いただけたらなと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#! /usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;aws-sdk-core&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">S3toS3</span>
</span><span class='line'>  <span class="c1"># アクセスキー,シークレットキー,リージョンを指定</span>
</span><span class='line'>  <span class="c1"># 面倒なのでリージョは最初から東京にしとく</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">access_key</span><span class="p">,</span><span class="n">secret_key</span><span class="p">,</span><span class="n">region</span> <span class="o">=</span> <span class="s1">&#39;ap-northeast-1&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Aws</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span><span class="p">{</span>
</span><span class='line'>        <span class="ss">:access_key_id</span> <span class="o">=&gt;</span> <span class="n">access_key</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:secret_access_key</span> <span class="o">=&gt;</span> <span class="n">secret_key</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:region</span> <span class="o">=&gt;</span> <span class="n">region</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1"># S3のクラスを利用</span>
</span><span class='line'>    <span class="vi">@s3</span> <span class="o">=</span> <span class="no">Aws</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#  バケット内のファイル情報（ファイル名やEtagなどなど）を取得し</span>
</span><span class='line'>  <span class="c1"># ファイル名をKeyとし、etagをvalueとするHashの作成</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">etag_list</span><span class="p">(</span><span class="n">bucket</span><span class="p">)</span>
</span><span class='line'>    <span class="n">etaglist</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 指定したバケット内の情報を取得</span>
</span><span class='line'>    <span class="n">objs</span> <span class="o">=</span> <span class="vi">@s3</span><span class="o">.</span><span class="n">list_objects</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">:bucket</span> <span class="o">=&gt;</span> <span class="n">bucket</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="c1"># バケット内の情報からファイル名(:key)、Etag(:etag)を抽出し</span>
</span><span class='line'>    <span class="c1"># HashのKey,Valueとする</span>
</span><span class='line'>    <span class="n">objs</span><span class="o">[</span><span class="ss">:contents</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">obj</span><span class="o">|</span>
</span><span class='line'>      <span class="n">etaglist</span><span class="o">[</span><span class="n">obj</span><span class="o">[</span><span class="ss">:key</span><span class="o">]]</span> <span class="o">=</span> <span class="n">obj</span><span class="o">[</span><span class="ss">:etag</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">etaglist</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># srcをbucket/targetへコピーする</span>
</span><span class='line'>  <span class="c1"># コピーできるファイルは１つだけ</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">copy</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span><span class="n">src</span><span class="p">,</span><span class="n">target</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@s3</span><span class="o">.</span><span class="n">copy_object</span><span class="p">(</span>
</span><span class='line'>        <span class="ss">:bucket</span>      <span class="o">=&gt;</span> <span class="n">bucket</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:copy_source</span> <span class="o">=&gt;</span> <span class="n">src</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:key</span>         <span class="o">=&gt;</span> <span class="n">target</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># バッケト間で変更のあったファイル(Etagが異なる)、新規のファイル(Keyが存在しない)だけをコピーする</span>
</span><span class='line'>  <span class="c1"># とりあえこれだけ実行しとけばコピーできる</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">s3_to_s3</span><span class="p">(</span><span class="n">srcbucket</span><span class="p">,</span><span class="n">destbucket</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># コピー元バケットの情報を取得(ファイル名とEtagのみ)</span>
</span><span class='line'>    <span class="n">srclist</span>  <span class="o">=</span> <span class="n">etag_list</span><span class="p">(</span><span class="n">srcbucket</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># コピー先バケットの情報を取得(ファイル名とEtagのみ)</span>
</span><span class='line'>    <span class="n">destlist</span> <span class="o">=</span> <span class="n">etag_list</span><span class="p">(</span><span class="n">destbucket</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 同じKey、同じValueの情報をHashから取り除く</span>
</span><span class='line'>    <span class="c1"># 取り除いた後のHashのKey(ファイル名)だけを抽出</span>
</span><span class='line'>    <span class="n">difflist</span> <span class="o">=</span> <span class="n">srclist</span><span class="o">.</span><span class="n">reject</span><span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">v</span> <span class="o">==</span> <span class="n">destlist</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">keys</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 抽出されたファイル名を１つずつコピーする</span>
</span><span class='line'>    <span class="n">difflist</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="n">copy</span><span class="p">(</span><span class="n">destbucket</span><span class="p">,</span><span class="n">srcbucket</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="n">file</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1"># コピーされたファイル名を返す</span>
</span><span class='line'>    <span class="n">difflist</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 実行する場合</span>
</span><span class='line'><span class="n">srcbucket</span>  <span class="o">=</span> <span class="s1">&#39;test-src-bucket&#39;</span>
</span><span class='line'><span class="n">destbucket</span> <span class="o">=</span> <span class="s1">&#39;test-dest-bucket&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 設定入れて</span>
</span><span class='line'><span class="n">s3</span> <span class="o">=</span> <span class="no">S3toS3</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">access_key</span><span class="p">,</span><span class="n">secret_key</span><span class="p">,</span> <span class="s1">&#39;ap-northeast-1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># コピー</span>
</span><span class='line'><span class="n">files</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="n">s3_to_s3</span><span class="p">(</span><span class="n">tmpbucket</span><span class="p">,</span><span class="n">livebucket</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># コピーされたファイル出力！</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pp&#39;</span>
</span><span class='line'><span class="n">pp</span> <span class="n">files</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上です。
ちなみにS3とCloudFfontを連携させていて更新する度にinvalidationしている場合には、このプログラム走らせた後の返り値をinvalidationする値に突っ込んでやればいいかなと思います。
実はそのままついでに作ったけどまたの機会に…</p>

<p>次はScalaでAWS SDK for JavaつかってEC2のリストとか取るやつでも書こうかな…？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シェルスクリプトメモ その１〜]]></title>
    <link href="http://blog.momiage.tokyo/blog/2014/08/26/sierusukuriputomemo-sofalse1/"/>
    <updated>2014-08-26T01:50:13+09:00</updated>
    <id>http://blog.momiage.tokyo/blog/2014/08/26/sierusukuriputomemo-sofalse1</id>
    <content type="html"><![CDATA[<h1>シェルスクリプトメモ その１</h1>

<p>仕事とかでシェルスクリプト書いててよく利用する事を備忘録的にまとめてみようかとおもいます。</p>

<h2>コマンドの内容を変数に格納</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 試しにディレクトリ内のファイルの数を数えてみる</span>
</span><span class='line'><span class="nv">$ </span>ls -1 <span class="p">|</span> wc -l
</span><span class='line'>13
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ filecount1</span><span class="o">=</span><span class="k">$(</span>ls -1 <span class="p">|</span> wc -l<span class="k">)</span>
</span><span class='line'><span class="nv">$ filecount2</span><span class="o">=</span><span class="sb">`</span><span class="o">(</span>ls -1 <span class="p">|</span> wc -l<span class="o">)</span><span class="sb">`</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$filecount1</span>
</span><span class='line'>13
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$filecount2</span>
</span><span class='line'>13
</span></code></pre></td></tr></table></div></figure>


<p>変数に格納したいコマンドを<code>$( )</code>又は<code>` `</code>で囲んで変数に渡してやると実行結果が変数に格納される。</p>

<!--more-->


<h2>コマンドの内容を配列に格納</h2>

<p><code>ls</code>や<code>find</code>の内容を個別の変数、配列として格納したい場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>file1 file2 file3
</span><span class='line'><span class="c"># 普通に変数に格納する</span>
</span><span class='line'><span class="nv">$ files</span><span class="o">=</span><span class="k">$(</span>ls<span class="k">)</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$files</span>
</span><span class='line'>file1 file2 file3
</span><span class='line'><span class="c"># 1つの文字列として格納されている</span>
</span><span class='line'><span class="c"># 配列に格納</span>
</span><span class='line'><span class="nv">$ files</span><span class="o">=(</span><span class="k">$(</span>ls<span class="k">)</span><span class="o">)</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>files
</span><span class='line'>file1
</span><span class='line'><span class="c"># 配列の場所を指定して参照する場合はxに場所を入力 ${files[x]}</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">files</span><span class="p">[2]</span><span class="k">}</span>
</span><span class='line'>file3
</span><span class='line'><span class="c"># すべて参照(forでループ)</span>
</span><span class='line'><span class="nv">$ </span><span class="k">for</span> file in <span class="k">${</span><span class="nv">files</span><span class="p">[*]</span><span class="k">}</span> <span class="p">;</span><span class="k">do</span>
</span><span class='line'>&gt;   <span class="nb">echo</span> <span class="nv">$file</span>
</span><span class='line'>&gt; <span class="k">done</span>
</span><span class='line'>file1
</span><span class='line'>file2
</span><span class='line'>file3
</span></code></pre></td></tr></table></div></figure>


<h2>変数の中の文字列をマッチしたところを除外して取り出し</h2>

<p>変数を展開するときにパターンマッチさせる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># ファイルのパスを格納</span>
</span><span class='line'><span class="nv">$ filepath</span><span class="o">=</span><span class="k">$(</span>ls /tmp/test/file1<span class="k">)</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">filepath</span><span class="k">}</span>
</span><span class='line'>/tmp/test/file1
</span><span class='line'><span class="c"># 前方からマッチした所を除外</span>
</span><span class='line'><span class="c"># 最短一致</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">filepath</span><span class="p">#*/</span><span class="k">}</span>
</span><span class='line'>tmp/test/file1
</span><span class='line'><span class="c"># 最長一致</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">filepath</span><span class="p">##*/</span><span class="k">}</span>
</span><span class='line'>file1
</span><span class='line'>
</span><span class='line'><span class="c"># 後方からマッチした所を除外</span>
</span><span class='line'><span class="c"># 最短一致（後方から)</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">filepath</span><span class="p">%/*</span><span class="k">}</span>
</span><span class='line'>/tmp/test
</span><span class='line'><span class="c"># 最長一致（後方から）※今回は出力なし</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">filepath</span><span class="p">%%/*</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とりあえず1回めの記事なのでこれくらいでおわります。</p>

<p>なお、内容はちゃんと調べて記載してるわけではないので僕の理解等に間違い等ありましたらご指摘いただけると幸いです。</p>
]]></content>
  </entry>
  
</feed>
